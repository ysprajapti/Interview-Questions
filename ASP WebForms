Basic Questions
--------------------------
1) What is ASP.NET WebForms?
ASP.NET WebForms is a part of the ASP.NET framework used to build dynamic, data-driven web applications. It provides a drag-and-drop, event-driven programming model, making it similar to Windows Forms for web development.
 
Key Points:
Uses server controls and code-behind files.
Maintains state between HTTP requests using ViewState.
Built on top of IIS (Internet Information Services).


2) What are the key features of ASP.NET WebForms?
Event-Driven Programming: Similar to desktop apps (Click, TextChanged).
ViewState: Maintains control values between postbacks.
Rich Server Controls: DataGrid, GridView, Calendar, etc.
Code-Behind Model: Separates HTML UI from C#/VB.NET logic.
Master Pages: Enables consistent layout across pages.
Built-in Security: Supports Forms and Windows Authentication.
Validation Controls: Easily validate user inputs.
State Management: ViewState, Session, Cookies, and Application state.

3) Explain the WebForms Page Life Cycle in detail.
Page_PreInit → Page_Init → Page_Load → Control Events → Page_PreRender → Page_Render → Page_Unload

4) What is ViewState in WebForms?
ViewState is a hidden field (__VIEWSTATE) that ASP.NET uses to store the state of controls between postbacks.
Example:
You enter a value in a TextBox.
On postback, ViewState restores that value.

✔ Pros: Simplifies state management.
✔ Cons: Increases page size.
✔ Disable ViewState:<asp:TextBox ID="txtName" runat="server" EnableViewState="false"></asp:TextBox>


5) How does PostBack work in WebForms?
PostBack is the process where a WebForms page submits data to the server, and the same page is reloaded with updated data.

How it Works:
Controls send data to server via __doPostBack() JavaScript function.
Server processes request, updates ViewState, and sends the updated HTML back.
Check for PostBack:

if (!IsPostBack)
{
    // Code that runs only on first load
}

6) What are Server Controls in WebForms?
ASP.NET Server Controls are objects on a WebForm that run on the server and render HTML to the browser.

Examples:
Standard Controls: Button, TextBox, Label.
Data Controls: GridView, Repeater.
Validation Controls: RequiredFieldValidator, RangeValidator.


7) What is the difference between HTML controls and ASP.NET Server controls?
| Aspect               | HTML Controls           | ASP.NET Server Controls                       |
| -------------------- | ----------------------- | --------------------------------------------- |
|   Runs On            | Client-side only        | Server-side + client-side                     |
|   Events             | No server events        | Supports server events                        |
|   State Management   | No automatic state      | Maintains state via ViewState                 |
|   Example            | `<input type="text" />` | `<asp:TextBox ID="txtName" runat="server" />` |


8) How does event handling work in WebForms?
Event Handling:
Server controls generate events (e.g., Button Click).
Handled on the server-side in the code-behind file.
Example
protected void btnSubmit_Click(object sender, EventArgs e)
{
    lblMessage.Text = "Button clicked!";
}

ASP.NET maps the event using the __EVENTTARGET hidden field during PostBack.

9) What are Master Pages? How are they used?
Master Pages allow you to define a common layout (header, footer, navigation) for multiple WebForms pages.

How to Use:
Create a Master Page: Site.master
Add a ContentPlaceHolder:
Example
<asp:ContentPlaceHolder ID="MainContent" runat="server"></asp:ContentPlaceHolder>

In content pages, fill placeholders:
<asp:Content ID="Content1" ContentPlaceHolderID="MainContent" runat="server">
    <h1>Welcome!</h1>
</asp:Content>

10) What are User Controls (ASCX) and when would you use them?
User Controls are reusable components (like mini pages) that can be embedded in multiple WebForms pages.
 
When to Use:
Reusable UI pieces (e.g., login forms, navigation bars).

Steps:
Create LoginControl.ascx.
Add to a page:
Example
<%@ Register Src="~/LoginControl.ascx" TagName="LoginControl" TagPrefix="uc" %>
<uc:LoginControl ID="Login1" runat="server" />

Intermediate Questions 
-----------------------------------------------

11. Explain the difference between Session State, Application State, and ViewState.
| Feature 	      | Session State	                            | Application State	                        | ViewState                                   |
| --------------- | ------------------------------------------- | ----------------------------------------- | ------------------------------------------- |
| Scope	          | Specific to a user session                  | Shared across all users and sessions      | Specific to a single page for a single user |
| Lifetime	      | Until browser is closed / session times out | Until the application restarts            | Until the next PostBack                     |
| Stored In       | Server memory (by default)                  | Server memory                             | Hidden field (`__VIEWSTATE`) in the page    |
| Example Use	  | Shopping cart items                         | App-wide counters like total active users | Retaining control values between postbacks  |

Example:
// Session
Session["UserName"] = "John";

// Application
Application["AppCounter"] = 100;

// ViewState
ViewState["PageCounter"] = 5;

12. What is the difference between Server.Transfer and Response.Redirect?

| Feature              	   | Server.Transfer                     	 | Response.Redirect                     	 |
| ------------------------ | --------------------------------------- | ----------------------------------------- |
| Browser URL	           | URL in browser does not change          | URL in browser changes                    |
| Round Trip to Client	   | No (server handles transfer internally) | Yes (makes a round trip to client)        |
| Performance	           | Faster                                  | Slightly slower (due to extra round trip) |
| Cross-Domain Support 	   | No                                      | Yes                                       |

Example:
// Server.Transfer
Server.Transfer("Page2.aspx");

// Response.Redirect
Response.Redirect("Page2.aspx");



13. How do you handle errors and exceptions in WebForms?
Ways to handle errors:

1.Try-Catch Block (Code Level):
Example
try
{
    int result = 10 / int.Parse(txtNumber.Text);
}
catch (DivideByZeroException ex)
{
    lblError.Text = "Cannot divide by zero!";
}


2.Global Error Handling (Global.asax):

protected void Application_Error(object sender, EventArgs e)
{
    Exception ex = Server.GetLastError();
    // Log error
    Response.Redirect("~/ErrorPage.aspx");
}

3. Custom Errors in Web.config:


<customErrors mode="On" defaultRedirect="ErrorPage.aspx">
  <error statusCode="404" redirect="NotFound.aspx" />
</customErrors>


14. What are HTTP Handlers and HTTP Modules?
HTTP Handler:
Processes HTTP requests for specific types of resources.
Example: Serving `.aspx`, `.ashx`, or custom file types.

HTTP Module:
Works like a filter to process requests/responses during their lifecycle.

Example:
Handler (.ashx):
public class MyHandler : IHttpHandler
{
    public void ProcessRequest(HttpContext context)
    {
        context.Response.ContentType = "text/plain";
        context.Response.Write("Hello from Handler!");
    }

    public bool IsReusable => false;
}

Module:
public class MyModule : IHttpModule
{
    public void Init(HttpApplication app)
    {
        app.BeginRequest += (src, args) =>
        {
            HttpContext.Current.Response.Write("Request started<br>");
        };
    }

    public void Dispose() { }
}

15. What is Cross-Page PostBack in WebForms?

Definition:
Cross-Page PostBack allows data to be posted from one page to another page, and the second page can access the values of controls on the first page.

How to use:

1. Set "PostBackUrl" property on a Button:


<asp:Button ID="btnSubmit" runat="server" PostBackUrl="~/Page2.aspx" Text="Go" />


2. On target page, access source page:


string name = ((TextBox)PreviousPage.FindControl("txtName")).Text;


16. What are Validation Controls in WebForms?
Purpose:
Validation controls help ensure that user input meets certain criteria before processing.

Types of Validators:
| Validator               	 | Purpose	                               |
| -------------------------- | --------------------------------------- |
| RequiredFieldValidator     | Ensures the field is not empty          |
| RangeValidator             | Checks if input falls within a range    |
| RegularExpressionValidator | Matches input against a pattern         |
| CompareValidator           | Compares values of two controls         |
| CustomValidator            | Allows custom validation logic          |
| ValidationSummary          | Displays all validation errors together |

Example:

<asp:TextBox ID="txtAge" runat="server"></asp:TextBox>
<asp:RangeValidator ID="rvAge" runat="server"
    ControlToValidate="txtAge"
    MinimumValue="18" MaximumValue="60"
    Type="Integer" ErrorMessage="Age must be 18-60"></asp:RangeValidator>


17. How does State Management work in WebForms?

Two Types:
1. Client-Side:
   ViewState, Cookies, QueryStrings, Hidden Fields.

2. Server-Side:
   Session, Application, Cache.

Example:

// Client-side (ViewState)
ViewState["Counter"] = 5;

// Server-side (Session)
Session["UserName"] = "John";


18. Explain IsPostBack property with an example.

Definition:
"IsPostBack" indicates whether the page is loaded for the first time or as a result of a PostBack.

Example:
protected void Page_Load(object sender, EventArgs e)
{
    if (!IsPostBack)
    {
        // Load dropdown data only on first load
        ddlCities.DataSource = GetCities();
        ddlCities.DataBind();
    }
}

19. What are Repeater, DataList, and GridView controls?
| Control  | Description   							                  |
| -------- | -------------------------------------------------------- |
| Repeater | Lightweight, no built-in styling, full control of HTML.  |
| DataList | Supports multi-column layouts with some styling options. |
| GridView | Rich control with built-in paging, sorting, and editing. |

GridView Example:
<asp:GridView ID="gvEmployees" runat="server" AutoGenerateColumns="true"></asp:GridView>


gvEmployees.DataSource = GetEmployeeData();
gvEmployees.DataBind();


20. How do you perform CRUD operations in WebForms ?
Steps for CRUD with GridView:
1. Bind data to GridView.
2. Enable `AutoGenerateEditButton` and `AutoGenerateDeleteButton`.
3. Handle events: `RowEditing`, `RowUpdating`, `RowDeleting`.

Example:
protected void gvEmployees_RowUpdating(object sender, GridViewUpdateEventArgs e)
{
    int id = Convert.ToInt32(gvEmployees.DataKeys[e.RowIndex].Value);
    string name = ((TextBox)gvEmployees.Rows[e.RowIndex].FindControl("txtName")).Text;
    UpdateEmployee(id, name);
    gvEmployees.EditIndex = -1;
    BindGrid();
}

21. What is Client-Side vs Server-Side Validation in WebForms?
Client-Side Validation:
Happens in the browser using JavaScript.
Faster (no round trip to server).
Prevents bad input before submitting the form.

Server-Side Validation:
Happens on the server after submission.
Ensures security (users can bypass client validation by disabling JS).

Example of Client-Side Validation:
<asp:RequiredFieldValidator ID="rfvName" runat="server"
    ControlToValidate="txtName" ErrorMessage="Name is required"
    EnableClientScript="true" Display="Dynamic"></asp:RequiredFieldValidator>

Key Difference:
Client-side improves user experience; server-side ensures data integrity and security.


22. What are the differences between ASP.NET WebForms and ASP.NET MVC?
| Feature          | WebForms                     | MVC                                        |
| ---------------- | ---------------------------- | ---------------------------------------------- |
| Architecture     | Page-based, event-driven     | Model-View-Controller (separation of concerns) |
| State Management | ViewState                    | Stateless (better for web scale apps)          |
| HTML Control     | Auto-generated               | Full control over HTML                         |
| Testability      | Harder to test               | Easily testable with unit tests                |
| URL Routing      | Limited support              | Powerful routing out-of-the-box                |
| Use Case         | Legacy apps, rapid UI design | Modern, scalable, maintainable apps            |



23. How do you secure a WebForms application?
Best Practices:
1. Use Forms Authentication:
<authentication mode="Forms">
  <forms loginUrl="Login.aspx" timeout="30" />
</authentication>

2.Role-based Authorization:
<authorization>
  <deny users="?" /> <!-- Deny anonymous users -->
  <allow roles="Admin" />
</authorization>

3. Validate all user inputs (prevent SQL Injection).
4. Use HTTPS (SSL/TLS).
5. Store sensitive data securely (e.g., passwords hashed with PBKDF2).
6. Prevent Cross-Site Scripting (XSS) using `Server.HtmlEncode()`.



24. What are Themes and Skins in WebForms?
Themes:
Define the look and feel (CSS, images, skins).
Applied at page or application level.

Skins:
Define default property settings for controls.
Example:

<!-- Web.config -->
<pages theme="MyTheme" />

<asp:Button ID="btnSubmit" runat="server" Text="Submit" SkinID="PrimaryButton" />

25. What are Cookies? How are they different from Sessions?

| Feature        | Cookies                          | Session                                 |
| -------------- | -------------------------------- | --------------------------------------- |
| Stored On      | Client browser                   | Server memory                           |
| Lifetime   	   | Can persist after browser closes | Ends when browser closes (or times out) |
| Size Limit	   | Small (\~4KB)                    | Larger, only limited by server memory   |
| Use Case   	   | “Remember Me” login, preferences | Shopping cart, user login state         |

Cookie Example
Response.Cookies["UserName"].Value = "John";
Response.Cookies["UserName"].Expires = DateTime.Now.AddDays(1);


Session Example:
Session["UserName"] = "John";

26. What is the difference between inline code and code-behind?

| Feature         | Inline Code                       | Code-Behind                               |
| --------------- | --------------------------------- | ----------------------------------------- |
| Definition      | Code embedded within ASPX page    | Code separated in a .cs (or .vb) file     |
| Maintainability | Harder to maintain                | Easier to manage and scale                |
| Example         | `<% Response.Write("Hello!"); %>` | `lblMessage.Text = "Hello!";` in .cs file |

Preferred: Code-behind (cleaner architecture).


27. Explain Page\_PreInit, Page\_Init, Page\_Load, and Page\_Unload.
| Event         | Purpose                                                |
| ------------- | ------------------------------------------------------ |
| Page\_PreInit | Set master page, themes; create dynamic controls.      |
| Page\_Init    | Initialize controls but ViewState is not restored yet. |
| Page\_Load    | Controls are fully initialized; use IsPostBack here.   |
| Page\_Unload  | Cleanup resources (cannot access page controls).       |

Example:
protected void Page_PreInit(object sender, EventArgs e) { }
protected void Page_Init(object sender, EventArgs e) { }
protected void Page_Load(object sender, EventArgs e) { }
protected void Page_Unload(object sender, EventArgs e) { }



28. How do you pass data between pages in WebForms?
Ways to Pass Data:
1. Query Strings:
Response.Redirect("Page2.aspx?UserName=John");

2. Session:
Session["UserName"] = "John";
Response.Redirect("Page2.aspx");

3. Cross-Page PostBack:
   Use `PostBackUrl` and `PreviousPage.FindControl`.


29. What is the difference between Static Binding and Dynamic Binding in Data Controls?

| Feature     | Static Binding                              | Dynamic Binding                            |
| ----------- | -----------------------------------------   | ------------------------------------------ |
| Definition  | Data assigned at design time (in markup).   | Data assigned at runtime (in code-behind). |
| Flexibility | Less flexible.                              | Highly flexible.                           |
| Example     | `<asp:Label Text='<%# Eval("Name") %>' />`  | `GridView.DataSource = GetData();`         |

Dynamic Binding Example:

GridView1.DataSource = GetEmployees();
GridView1.DataBind();


30. What is Trace in ASP.NET WebForms?
Definition:
Trace provides runtime debugging information about page requests, control state, and server variables.

Enable Trace:
<%@ Page Trace="true" %>

Key Use Cases:
Debug page flow and events.
Analyze execution time of controls.


31. How do you optimize performance in a WebForms application?
Techniques:

1. Enable Page and Data Caching (use `OutputCache` and `Cache` API).
2. Minimize ViewState (disable it where unnecessary).

<asp:TextBox ID="txt1" runat="server" EnableViewState="false" />

3. Use AJAX (UpdatePanel) to avoid full page reloads.
4. Optimize database queries (use indexes, stored procedures).
5. Compress HTTP responses using IIS GZip.
6. Bundle & minify CSS/JS files.


# ✅ **32. What are the limitations of WebForms compared to newer frameworks?**

✔ **Limitations:**

* ViewState increases page size.
* Harder to test (tight coupling between UI and logic).
* No clear separation of concerns (unlike MVC).
* Less control over generated HTML.
* Poor support for modern SPA and mobile apps.

---

# ✅ **33. How does ASP.NET WebForms maintain the state of controls between requests?**

✔ **Using ViewState:**

* Stores state of controls in a hidden field (`__VIEWSTATE`) on the page.
* Sent to client and back to server on PostBack.

✔ **Example:** TextBox value retained:

```aspx
<asp:TextBox ID="txtName" runat="server" />
```

---

# ✅ **34. What is the difference between Web.config and Machine.config?**

| **Feature**   | **Web.config**                       | **Machine.config**                           |
| ------------- | ------------------------------------ | -------------------------------------------- |
| **Scope**     | Specific to a web application        | Applies to all apps on the server            |
| **Location**  | App root directory                   | Framework directory (e.g., `C:\Windows\...`) |
| **Overrides** | Can override Machine.config settings | Cannot override Web.config                   |

---

# ✅ **35. What is the difference between authentication and authorization in WebForms?**

| **Feature** | **Authentication**     | **Authorization**                         |
| ----------- | ---------------------- | ----------------------------------------- |
| **Purpose** | Verifies user identity | Determines what user is allowed to access |
| **When?**   | Happens first          | Happens after authentication              |
| **Example** | Login form validation  | Restricting Admin area to Admin users     |

---

# ✅ **36. Explain Forms Authentication in WebForms.**

✔ **How It Works:**

1. User submits credentials on `Login.aspx`.
2. Validated against a database.
3. Issue a **Forms Authentication Cookie**.
4. Redirect to originally requested page.

✔ **Configure in Web.config:**

```xml
<authentication mode="Forms">
  <forms loginUrl="Login.aspx" timeout="30" />
</authentication>
```

---

# ✅ **37. How do you implement Role-Based Security in WebForms?**

✔ **Steps:**

1. Set Roles in code:

```csharp
if (Roles.IsUserInRole("Admin"))
{
    // Show admin features
}
```

2. Restrict access in Web.config:

```xml
<authorization>
  <allow roles="Admin" />
  <deny users="*" />
</authorization>
```

---

# ✅ **38. What are Custom Controls in WebForms?**

✔ **Definition:**
Custom Controls are reusable server controls compiled into assemblies (.dll).

✔ **Types:**

* **Composite Controls:** Combine existing controls.
* **Derived Controls:** Extend existing ones.

✔ **Use Case:**
Create a company-wide **login widget**.

---

# ✅ **39. What is the difference between Synchronous and Asynchronous PostBack?**

| **Feature**         | **Synchronous PostBack** | **Asynchronous PostBack**           |
| ------------------- | ------------------------ | ----------------------------------- |
| **What Happens**    | Reloads entire page      | Only updates a portion of the page  |
| **User Experience** | Slower, flickers         | Faster, smoother (AJAX UpdatePanel) |

---

# ✅ **40. What is AJAX in WebForms? How does UpdatePanel work?**

✔ **AJAX (Asynchronous JavaScript and XML):** Enables partial page updates without full reload.

✔ **UpdatePanel Example:**

```aspx
<asp:ScriptManager runat="server" />
<asp:UpdatePanel runat="server">
    <ContentTemplate>
        <asp:Label ID="lblTime" runat="server" Text="Time" />
        <asp:Button ID="btnUpdate" runat="server" Text="Update" OnClick="btnUpdate_Click" />
    </ContentTemplate>
</asp:UpdatePanel>
```

---

# ✅ **41. What are Session Modes in ASP.NET (InProc, StateServer, SQLServer)?**

| **Mode**        | **Description**                                         |
| --------------- | ------------------------------------------------------- |
| **InProc**      | Stores session in web server memory (default).          |
| **StateServer** | Stores session in a separate process (Windows Service). |
| **SQLServer**   | Stores session in a SQL database for persistence.       |

---

# ✅ **42. What is Web.config Transformation?**

✔ **Definition:**
A feature to automatically modify Web.config settings during deployment.

✔ **Example:**

* **Web.Release.config** overrides debug settings:

```xml
<system.web>
  <compilation xdt:Transform="Replace" debug="false" />
</system.web>
```

---

# ✅ **43. How do you consume a Web API in a WebForms app?**

✔ **Example using HttpClient:**

```csharp
HttpClient client = new HttpClient();
var response = await client.GetAsync("https://api.example.com/products");
string result = await response.Content.ReadAsStringAsync();
```

---

# ✅ **44. What is the role of the Global.asax file?**

✔ **Purpose:**

* Define **application-level events**.
* Examples: `Application_Start`, `Session_Start`, `Application_Error`.

✔ **Example:**

```csharp
void Application_Start(object sender, EventArgs e)
{
    // Initialize application-wide settings
}
```

---

# ✅ **45. How do you cache a page or control in WebForms?**

✔ **Page Caching:**

```aspx
<%@ OutputCache Duration="60" VaryByParam="None" %>
```

✔ **Control Caching:**
Use `PartialCaching` attribute on user controls.

---

# ✅ **46. What is the difference between Response.Write and Response.Output.Write?**

| **Feature**       | **Response.Write**     | **Response.Output.Write**                       |
| ----------------- | ---------------------- | ----------------------------------------------- |
| **Functionality** | Writes string directly | Supports formatted strings like `string.Format` |

✔ **Example:**

```csharp
Response.Output.Write("Hello {0}", userName);
```

---

# ✅ **47. What are Hidden Fields? When would you use them?**

✔ **Definition:**
A way to store data in a web page that’s **not visible** to users but sent during PostBack.

✔ **Example:**

```aspx
<asp:HiddenField ID="hdnValue" runat="server" Value="123" />
```

✔ **Use Case:**
Pass IDs or flags between requests without showing them on UI.

---

# ✅ **48. How do you upload and process files in WebForms?**

✔ **Steps:**

1. Add FileUpload control:

```aspx
<asp:FileUpload ID="FileUpload1" runat="server" />
<asp:Button ID="btnUpload" Text="Upload" runat="server" OnClick="btnUpload_Click" />
```

2. Code-behind:

```csharp
if (FileUpload1.HasFile)
{
    FileUpload1.SaveAs(Server.MapPath("~/Uploads/" + FileUpload1.FileName));
}
```

---

# ✅ **49. What are Strongly Typed Data Controls in WebForms?**

✔ **Definition:**
Data controls (like GridView) bound to a specific **DataSource Type** with IntelliSense support.

✔ **Example:**

```aspx
<asp:GridView runat="server" ItemType="MyApp.Models.Employee" />
```

---

# ✅ **50. How do you handle large file uploads and prevent timeouts?**

✔ **Solutions:**

1. Increase limits in Web.config:

```xml
<httpRuntime maxRequestLength="51200" executionTimeout="3600" />
```

2. Use streaming API (e.g., `Request.Files`) to process chunks.
3. Display progress with AJAX or third-party controls.

---

# 📝 **Quick Summary (31–50)**

| **Q#** | **Topic**                               | **Key Takeaway**                             |
| ------ | --------------------------------------- | -------------------------------------------- |
| 31     | Optimize Performance                    | Minimize ViewState, caching, DB optimization |
| 32     | WebForms Limitations                    | Not scalable, limited HTML control           |
| 33     | State Maintenance                       | Uses ViewState (hidden field)                |
| 34     | Web.config vs Machine.config            | App vs Server-wide settings                  |
| 35     | Authentication vs Authorization         | Verify identity vs Access rights             |
| 36     | Forms Authentication                    | Login flow with FormsAuth cookie             |
| 37     | Role-Based Security                     | Restrict features by roles                   |
| 38     | Custom Controls                         | Reusable server controls                     |
| 39     | Sync vs Async PostBack                  | Async = UpdatePanel, no full reload          |
| 40     | AJAX & UpdatePanel                      | Partial updates without full PostBack        |
| 41     | Session Modes                           | InProc, StateServer, SQLServer               |
| 42     | Web.config Transformation               | Deploy-specific config changes               |
| 43     | Consume Web API                         | HttpClient for REST APIs                     |
| 44     | Global.asax                             | App-level events (Start, Error, etc.)        |
| 45     | Caching Pages/Controls                  | OutputCache & PartialCaching                 |
| 46     | Response.Write vs Response.Output.Write | Output.Write supports formatted strings      |
| 47     | Hidden Fields                           | Store hidden data for PostBacks              |
| 48     | File Upload                             | FileUpload control with Server.SaveAs        |
| 49     | Strongly Typed Controls                 | Data-bound with IntelliSense                 |
| 50     | Large File Uploads                      | Increase limits, use chunked uploads         |

---

### ⚡ Next Step for You:

✅ Do you want me to make a **PDF Cheat Sheet with all 50 questions + diagrams (Page Lifecycle, ViewState, Session Flow, etc.)**?

✅ Or should I create a **Mini WebForms Project (CRUD, ViewState, AJAX, Validation)** for you to **showcase in interviews**?

✅ Or do you want me to prepare **a rapid-fire mock interview** on these 50 WebForms questions?

👉 **Which one should I prepare for you first?**

